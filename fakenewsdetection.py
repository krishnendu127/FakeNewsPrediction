# -*- coding: utf-8 -*-
"""FakeNewsDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PPxrnOt7MlYuVYzdoE8U8_NlH9HSD3Q1

1 -> Fake news
0 -> Real news
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stopwords in english
print(stopwords.words('english'))

#data preprocessing

#loading the dataset to a pandas dataframe
news_dataset=pd.read_csv('/content/train.csv')

news_dataset.isnull().sum()

#replacing the null values with empty string
news_dataset=news_dataset.fillna('')

#merging the author and news title
news_dataset['content']=news_dataset['author']+' '+ news_dataset['title']

# seperating the data and label
X= news_dataset.drop(columns='label',axis='1')
Y=news_dataset['label']

port_stem= PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

#seperating the data and label
X=news_dataset['content'].values
Y=news_dataset['label'].values

print(X)

print(Y)

# converting the textual data to numerical data

vectorizer=TfidfVectorizer()
vectorizer.fit(X)
X=vectorizer.transform(X)

print(X)

"""splitting the data into train and test"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y, random_state=2)

model=LogisticRegression()

model.fit(X_train,Y_train)

"""Evaluation"""

X_train_prediction=model.predict(X_train)
training_data_Accuracy=accuracy_score(X_train_prediction, Y_train)

print(training_data_Accuracy)

X_test_prediction=model.predict(X_test)
test_data_Accuracy=accuracy_score(X_test_prediction, Y_test)

print(test_data_Accuracy)

"""making a predictive system"""

X_new= X_test[0]
prediction=model.predict(X_new)

print(prediction)

if(prediction[0]==0):
  print("news is real")
else:
  print("news is fake")

print(Y_test[0])

